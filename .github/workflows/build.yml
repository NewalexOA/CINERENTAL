name: Build Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["Run Tests"]
    branches: [ main, develop ]
    types:
      - completed

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: cinerental:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix for https://github.com/docker/build-push-action/issues/252
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          docker run --rm cinerental:${{ github.sha }} python -c "import sys; print(f'Python {sys.version}')"
          echo "✅ Docker image built successfully"

      - name: Create local run instructions
        run: |
          cat > LOCAL_RUN_INSTRUCTIONS.md << 'EOF'
          # Локальный запуск приложения

          ## Предварительные требования

          - Docker и Docker Compose установлены на вашей машине
          - Git установлен на вашей машине

          ## Шаги для запуска

          1. Клонируйте репозиторий:
             ```bash
             git clone https://github.com/${{ github.repository }}.git
             cd $(basename ${{ github.repository }})
             ```

          2. Создайте файл .env на основе .env.example:
             ```bash
             cp .env.example .env
             ```

          3. Запустите приложение с помощью Docker Compose:
             ```bash
             docker compose up -d
             ```

          4. Приложение будет доступно по адресу: http://localhost:8000

          ## Разработка

          Для разработки рекомендуется использовать режим с автоматической перезагрузкой:

          ```bash
          docker compose up
          ```

          ## Запуск тестов

          ```bash
          docker compose up test
          ```
          EOF

      - name: Upload run instructions
        uses: actions/upload-artifact@v4
        with:
          name: local-run-instructions
          path: LOCAL_RUN_INSTRUCTIONS.md
          retention-days: 30
