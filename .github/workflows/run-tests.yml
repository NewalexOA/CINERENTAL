name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests in Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          echo "ENVIRONMENT=testing" > .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_DB=cinerental_test" >> .env
          echo "POSTGRES_HOST_AUTH_METHOD=trust" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "DEBUG=false" >> .env
          echo "TESTING=1" >> .env

      - name: Build and start containers
        run: |
          docker compose build test test_db redis
          docker compose up -d test_db redis

      - name: Wait for services to be ready
        run: |
          # Ensure wait-for.sh is executable
          chmod +x docker/wait-for.sh

          # Wait for PostgreSQL using wait-for.sh
          docker compose run --rm --no-deps --entrypoint "./docker/wait-for.sh" test postgres test_db 5432

          # Wait for Redis using wait-for.sh
          docker compose run --rm --no-deps --entrypoint "./docker/wait-for.sh" test redis redis 6379

      - name: Run migrations
        run: |
          docker compose run --rm --no-deps --entrypoint "alembic" test upgrade head

      - name: Run tests
        run: |
          # Выводим информацию о структуре проекта для отладки
          echo "=== Структура директории /app ==="
          docker compose run --rm --no-deps --entrypoint "ls" test -la /app

          echo "=== Проверка наличия директории tests ==="
          docker compose run --rm --no-deps --entrypoint "ls" test -la /app/tests || echo "Директория tests не найдена"

          # Выводим список тестовых файлов для отладки
          echo "=== Поиск тестовых файлов ==="
          docker compose run --rm --no-deps --entrypoint "find" test /app -type f -name "test_*.py" | sort

          # Создаем тестовый файл для проверки работы pytest
          echo "=== Создание тестового файла ==="
          docker compose run --rm --no-deps --entrypoint "sh" test -c "mkdir -p /tmp/tests && echo 'def test_dummy(): assert True' > /tmp/tests/test_dummy.py"

          # Запускаем тесты с созданным тестовым файлом
          echo "=== Запуск тестов с тестовым файлом ==="
          docker compose run --rm --no-deps -e PYTHONVERBOSE=1 -e PYTEST_DISABLE_PLUGIN_AUTOLOAD=1 test /tmp/tests/ -v --no-header -p no:cacheprovider

          # Используем команду согласно документации с дополнительными опциями для отладки
          echo "=== Запуск основных тестов ==="
          docker compose run --rm --no-deps -e PYTHONVERBOSE=1 -e PYTEST_DISABLE_PLUGIN_AUTOLOAD=1 test tests/ -v --no-header -p no:cacheprovider

      - name: Copy coverage report from container
        if: success()
        run: |
          # Create directory for coverage reports
          mkdir -p coverage

          # Copy HTML coverage report from container to host
          docker compose run --rm --no-deps --entrypoint "sh" test -c "cp -r htmlcov /app/coverage/ 2>/dev/null || echo 'No htmlcov directory found'"

      - name: Upload coverage report as artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/htmlcov
          retention-days: 7

      - name: Stop containers
        if: always()
        run: docker compose down
