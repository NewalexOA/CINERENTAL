name: act-rental-test

services:
  web-test:  # New service to run the FastAPI app for E2E tests
    build:
      context: .
      dockerfile: Dockerfile.test # Reuse the same build context/image as tests
      args:
        - PIP_INDEX_URL=${PIP_INDEX_URL:-http://devpi:3141/root/pypi/+simple/}
        - PIP_TRUSTED_HOST=${PIP_TRUSTED_HOST:-devpi}
        - APT_MIRROR=${APT_MIRROR:-http://deb.debian.org/debian}
    volumes:
      - ./backend:/app/backend
      - ./migrations:/app/migrations
      - ./media:/app/media
      - ./static:/app/static
      - ./templates:/app/templates
      - ./frontend:/app/frontend
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
    environment:
      - POSTGRES_SERVER=test_db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - REDIS_HOST=test-redis
      - REDIS_PORT=6379 # Internal Redis port
      - REDIS_PASSWORD=
      - TESTING=1
      - ENVIRONMENT=testing
      - SECRET_KEY=test-secret-key
      - PORT=8000 # Define internal port
      - HOST=0.0.0.0
    ports:
      - "8001:8000" # Expose on host port 8001 for potential debugging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      test_db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      devpi:
        condition: service_started
    networks:
      - test-network
    command: >
      bash -c "
        echo 'Starting FastAPI server for E2E tests...' && \
        uvicorn backend.main:app --host $$HOST --port $$PORT
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 12 # Allow more retries for app startup
      start_period: 3s # Give app time to start before first check

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
      args:
        - PIP_INDEX_URL=${PIP_INDEX_URL:-http://devpi:3141/root/pypi/+simple/}
        - PIP_TRUSTED_HOST=${PIP_TRUSTED_HOST:-devpi}
        - APT_MIRROR=${APT_MIRROR:-http://deb.debian.org/debian}
    volumes:
      - ./backend:/app/backend
      - ./tests:/app/tests
      - ./migrations:/app/migrations
      - ./docker:/app/docker
      - ./media:/app/media
      - ./static:/app/static
      - ./templates:/app/templates
      - ./frontend:/app/frontend
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
      - ./htmlcov:/app/htmlcov
    environment:
      # Keep DB/Redis settings for potential direct access in tests if needed
      - POSTGRES_SERVER=test_db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - REDIS_HOST=test-redis
      - REDIS_PORT=6379 # Internal Redis port
      - REDIS_PASSWORD=
      - TESTING=1
      - ENVIRONMENT=testing
      - SECRET_KEY=test-secret-key
      # Add URL for the test web server
      - APP_BASE_URL=http://web-test:8000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      test_db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      web-test: # Wait for the web server to be healthy
        condition: service_healthy
      devpi:
        condition: service_started
    networks:
      - test-network
    # Command should just keep the container running, tests are run via 'docker compose run'
    command: ['tail', '-f', '/dev/null']

  test_db:
    image: postgres:14-alpine
    tmpfs:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  test-redis:
    image: redis:6-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Добавляем devpi для тестирования
  devpi:
    build:
      context: ./docker/devpi
    ports:
      - "3142:3141"  # Другой порт, чтобы не конфликтовал с основным devpi
    volumes:
      - devpi_test_data:/data
    networks:
      - test-network

volumes:
  devpi_test_data:
    driver: local

networks:
  test-network:
    driver: bridge
