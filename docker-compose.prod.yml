name: cinerental_prod

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: >
      bash -c "./docker/wait-for-it.sh db 5432 &&
               ./docker/wait-for-it.sh redis 6379 &&
               uvicorn backend.main:app
               --host 0.0.0.0
               --port 8000
               --workers ${WORKERS_COUNT:-4}
               --log-level ${LOG_LEVEL:-warning}"
    volumes:
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cinerental_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.production
    expose:
      - 5432
    networks:
      - cinerental_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    expose:
      - 6379
    networks:
      - cinerental_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  media_volume:

networks:
  cinerental_network:
    driver: bridge
