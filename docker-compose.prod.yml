name: act-rental

services:
  web:
    build:
      context: .
      target: runtime
      args:
        BUILDKIT_INLINE_CACHE: 1
        ENV_TYPE: prod
        INSTALL_PLAYWRIGHT_DEPS: false
        INSTALL_PLAYWRIGHT: false
    command: ./docker/start.sh
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER:?POSTGRES_USER must be set in .env.production}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env.production}
      - POSTGRES_DB=${POSTGRES_DB:?POSTGRES_DB must be set in .env.production}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY must be set in .env.production}
      - DEBUG=false
      - WORKERS_COUNT=${WORKERS_COUNT:-4}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
    volumes:
      - media_volume:/app/media
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - act-rental_network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  db:
    image: postgres:14-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?POSTGRES_DB must be set in .env.production}
      - POSTGRES_USER=${POSTGRES_USER:?POSTGRES_USER must be set in .env.production}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env.production}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 512M
    networks:
      - act-rental_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-act-rental_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    user: postgres

  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Local access only
    volumes:
      - type: volume
        source: redis_data
        target: /data
        volume:
          nocopy: true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    networks:
      - act-rental_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: act-rental_postgres_data
    external: true
  redis_data:
    name: act-rental_redis_data
    external: true
  media_volume:
    name: act-rental_media
    external: true

networks:
  act-rental_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
